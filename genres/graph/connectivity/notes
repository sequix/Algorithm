有向图强连通分支的Tarjan算法

做一遍DFS，用dfn[i]表示编号为i的节点在DFS过程中的访问序号
(也可以叫做开始时间）。在DFS过程中会形成一搜索树。
在搜索树上越先遍历到的节点，显然dfn的值就越小。
dfn值越小的节点，就称为越“早”。

用low[i]表示从i节点出发DFS过程中i下方节点(开始时间大于dfn[i]
，且由i可达的节点）所能到达的最早的节点的开始时间。初始时
low[i]=dfn[i]

DFS过程中，碰到哪个节点，就将哪个节点入栈。栈中节
点只有在其所属的强连通分量已经全部求出时，才会出栈。

如果发现某节点u有边连到栈里的节点v，则更新u的low值为
min(low[u],dfn[v]) ，若low[u]被更新为dfn[v],则表明目前
发现u可达的最早的节点是v.

对于u的子节点v，从v出发进行的DFS结束回到u时，
使得low[u] = min(low[u],low[v])。因为u可达v,
所以v可达的最早的节点，也是u可达的。

如果一个节点u，从其出发进行的DFS已经全部完成并回到u
，而且此时其low值等于dfn值，则说明u可达的所有节点，
都不能到达任何比u早的节点----那么该节点u就是一个
强连通分量在DFS搜索树中的根。

此时，显然栈中u上方的节点，都是不能到达比u早的节点的。
将栈中节点弹出，一直弹到u(包括u),弹出的节点就构成了
一个强连通分量.  
