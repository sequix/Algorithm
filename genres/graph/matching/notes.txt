无向图G为二分图的充分必要条件是，G至少有两个顶点,且其所有回路的长度均为偶数。(染色)
任何无回路的的图均是二分图


特殊集合数量关系
	边独立数 = 最大匹配数
	点独立数 + 点覆盖数 = 点数n
	边覆盖数 + 边独立数 = 点数n
	二分图中
		点覆盖数 = 边独立数
		点独立数 = 边覆盖数
		点独立数 + 边独立数 = 点数n
		点覆盖数 + 边覆盖数 = 点数n
		
有向无环图的路径覆盖
	最小不相交路径覆盖
		用最少的不相交简单路覆盖所有顶点，问最少的路径数和这些路径为何？（简单路长度可为0（单个点））
		最小路径覆盖数＝G的点数－最小路径覆盖中的边数
		把原图中的每个点V拆成Vx和Vy，如果有一条有向边A->B，那么就加边Ax-By。
		这样就得到了一个二分图，最小路径覆盖=原图的节点数-新图最大匹配。
		证明：一开始每个点都独立的为一条路径，总共有n条不相交路径。
		我们每次在二分图里加一条边就相当于把两条路径合成了一条路径，
		因为路径之间不能有公共点，所以加的边之间也不能有公共点，这就是匹配的定义。
		所以有：最小路径覆盖=原图的节点数-新图最大匹配。
	最小可相交路径覆盖
		用最小的可相交路径覆盖所有顶点。
		先用floyd求出原图的传递闭包，即如果a到b有路，那么就加边a->b。然后就转化成了最小不相交路径覆盖问题。
		
有向图的最小点权覆盖集（POJ 2125）
	每个点由两个权值，入权值和出权值
	转换成求最小割，进而由最大流解决
	将每个点拆分为入点u+和出点u-
	将<u,v>改为<u-, v+>，容量为inf，以保证最小割中不会有该条边
	引入源点s，汇点t；连s->u-，容量为Wu-；连u+->t，容量为Wu+
	最大流算法求最小割
	割边的获取
		在残余网络里走流，如果有一条边是割边，
		那么之后就流不过去了，不是割边还能继续流，
		具体实现我们可以从源点S用dfs搜出能走到的点标记vis[] =1，
		那么对于边<u,v> 只要 vis[u] = 1 && vis[v] = 0 那就是割边了。